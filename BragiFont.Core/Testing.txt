using BragiFont.Internal;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Graphics.PackedVector;
using System;
using System.Collections.Generic;

namespace BragiFont
{
    public abstract class Text
    {
        public float Width { get; internal set; }

        public int WidthInt => Helpers.ConvertFloatToInt(Width);

        public float Height { get; internal set; }

        public int HeightInt => Helpers.ConvertFloatToInt(Height);

        public string String { get; internal set; }

        protected Font _font;

        public Vector2 Size { get; internal set; }

        internal List<TextCharacter> _characters;

        private Texture2D _texture;

        internal void AddCharacter(TextCharacter character)
        {
            _characters.Add(character);
        }

        internal void GenerateTexture()
        {
            var width = WidthInt;
            if (Helpers.ConvertFloatToInt(_characters[0].Position.X) < 0)
            {
                width -= Helpers.ConvertFloatToInt(_characters[0].Position.X);
            }

            var textureData = new Color[width, HeightInt];
            var underrun = 0;
            for (var i = 0; i < _characters.Count; i++)
            {
                var charPosX = Helpers.ConvertFloatToInt(_characters[i].Position.X);
                var charPosY = Helpers.ConvertFloatToInt(_characters[i].Position.Y);

                if (charPosX < 0)
                {
                    underrun -= charPosX;
                    charPosX = 0;
                }

                for (var x = 0; x < _characters[i].Character.Boundary.Width; x++)
                {
                    for (var y = 0; y < _characters[i].Character.Boundary.Height; y++)
                    {
                        var posX = x + charPosX + underrun;
                        var posY = y + charPosY;
                        var charX = x + _characters[i].Character.Boundary.X;
                        var charY = y + _characters[i].Character.Boundary.Y;
                        textureData[posX, posY] = new Color(_characters[i].Character.Texture.TextureDataArray[charX, charY].ToVector4());
                    }
                }
            }
            _texture = new Texture2D(Bragi.Core.GraphicsDevice, width, HeightInt, false, SurfaceFormat.Color);
            _texture.SetData(Helpers.Convert2DArrayTo1DArray<Color>(textureData, width, HeightInt));
        }

        public void Draw(SpriteBatch spriteBatch, Vector2 position, Color color)
        {
            spriteBatch.Draw(_texture, position, color);
            //for (var i = 0; i < _characters.Count; i++)
            //{
            //    spriteBatch.Draw(_characters[i].Character.Texture.Texture, _characters[i].Position + position, _characters[i].Character.Boundary, color);
            //}
        }

        public void Draw(SpriteBatch spriteBatch, Vector2 position, Color color, float rotation, Vector2 origin, Vector2 scale, SpriteEffects effects, float layerDepth)
        {
            var flipAdjustment = Vector2.Zero;
            var flippedVertically = (effects & SpriteEffects.FlipVertically) == SpriteEffects.FlipVertically;
            var flippedHorizontally = (effects & SpriteEffects.FlipHorizontally) == SpriteEffects.FlipHorizontally;

            if (flippedHorizontally)
            {
                origin.X *= -1;
                flipAdjustment.X = -Size.X;
            }
            if (flippedVertically)
            {
                origin.Y *= -1;
                flipAdjustment.Y = _font.Face.Size.Metrics.NominalHeight - Size.Y; 
            }

            var transformation = Matrix.Identity;
            var x = flippedHorizontally ? -scale.X : scale.X;
            var y = flippedVertically ? -scale.Y : scale.Y;
            if (Math.Abs(rotation) <= Constants.PRECISION)
            {
                transformation.M11 = x;
                transformation.M22 = y;
                transformation.M41 = ((flipAdjustment.X - origin.X) * transformation.M11) + position.X;
                transformation.M42 = ((flipAdjustment.Y - origin.Y) * transformation.M22) + position.Y;
            }
            else
            {
                float cos = (float)Math.Cos(rotation);
                float sin = (float)Math.Sin(rotation);

                transformation.M11 = x * cos;
                transformation.M12 = x * sin;
                transformation.M21 = y * -sin;
                transformation.M22 = y * cos;
                transformation.M41 = (((flipAdjustment.X - origin.X) * transformation.M11) + (flipAdjustment.Y - origin.Y) * transformation.M21) + position.X;
                transformation.M42 = (((flipAdjustment.X - origin.X) * transformation.M12) + (flipAdjustment.Y - origin.Y) * transformation.M22) + position.Y;
            }

            for (var i = 0; i < _characters.Count; i++)
            {
                var characterPosition = _characters[i].Position + position;
                Vector2.Transform(ref characterPosition, ref transformation, out characterPosition);
                spriteBatch.Draw(_characters[i].Character.Texture.Texture, characterPosition, _characters[i].Character.Boundary, color);
            }
        }
    }
}

